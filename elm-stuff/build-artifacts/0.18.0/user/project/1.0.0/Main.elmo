var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$onDrop = function (eventMessage) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'drop',
		{preventDefault: true, stopPropagation: false},
		_elm_lang$core$Json_Decode$succeed(eventMessage));
};
var _user$project$Main$onDragEnd = function (eventMessage) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dragend',
		_elm_lang$core$Json_Decode$succeed(eventMessage));
};
var _user$project$Main$onDragStart = function (eventMessage) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dragstart',
		_elm_lang$core$Json_Decode$succeed(eventMessage));
};
var _user$project$Main$onKeyDown = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$keyCode));
};
var _user$project$Main$filterByStatus = F2(
	function (status, tasks) {
		return A2(
			_elm_lang$core$List$filter,
			function (t) {
				return _elm_lang$core$Native_Utils.eq(t.status, status);
			},
			tasks);
	});
var _user$project$Main$updateStatus = F3(
	function (model, task, newStatus) {
		var newTasks = A2(
			_elm_lang$core$List$map,
			function (t) {
				return _elm_lang$core$Native_Utils.eq(t.description, task.description) ? _elm_lang$core$Native_Utils.update(
					t,
					{status: newStatus}) : t;
			},
			model.tasks);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{tasks: newTasks, draggingTask: _elm_lang$core$Maybe$Nothing}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Main$updateTask = F2(
	function (model, newStatus) {
		var tasks = function () {
			var _p0 = model.draggingTask;
			if (_p0.ctor === 'Just') {
				return A3(_user$project$Main$updateStatus, model, _p0._0, newStatus);
			} else {
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		}();
		return tasks;
	});
var _user$project$Main$initModel = {
	taskInput: '',
	tasks: {ctor: '[]'},
	draggingTask: _elm_lang$core$Maybe$Nothing
};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$Task = F2(
	function (a, b) {
		return {description: a, status: b};
	});
var _user$project$Main$newTask = function (model) {
	var newModel = _elm_lang$core$Native_Utils.update(
		model,
		{
			tasks: A2(
				_elm_lang$core$Basics_ops['++'],
				model.tasks,
				{
					ctor: '::',
					_0: A2(_user$project$Main$Task, model.taskInput, 'Backlog'),
					_1: {ctor: '[]'}
				}),
			taskInput: ''
		});
	return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'TaskInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{taskInput: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SubmitTask':
				return _elm_lang$core$Native_Utils.eq(_p1._0, 13) ? _user$project$Main$newTask(model) : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'DeleteTask':
				var filteredTasks = A2(
					_elm_lang$core$List$filter,
					function (t) {
						return !_elm_lang$core$Native_Utils.eq(t.description, _p1._0.description);
					},
					model.tasks);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{tasks: filteredTasks}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DragTask':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							draggingTask: _elm_lang$core$Maybe$Just(_p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return A2(_user$project$Main$updateTask, model, _p1._0);
		}
	});
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {tasks: a, taskInput: b, draggingTask: c};
	});
var _user$project$Main$DropTask = function (a) {
	return {ctor: 'DropTask', _0: a};
};
var _user$project$Main$DragTask = function (a) {
	return {ctor: 'DragTask', _0: a};
};
var _user$project$Main$DeleteTask = function (a) {
	return {ctor: 'DeleteTask', _0: a};
};
var _user$project$Main$taskList = function (task) {
	var _p2 = task;
	var description = _p2.description;
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('task__item'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', 'true'),
				_1: {
					ctor: '::',
					_0: _user$project$Main$onDragStart(
						_user$project$Main$DragTask(task)),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('task__item__header'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('task__delete'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Main$DeleteTask(task)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('X'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('task__item__body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(description),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$renderList = function (tasks) {
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('task__list'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _user$project$Main$taskList, tasks));
};
var _user$project$Main$taskSection = F2(
	function (name, list) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('board__section'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id(name),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'ondragover', 'return false'),
						_1: {
							ctor: '::',
							_0: _user$project$Main$onDrop(
								_user$project$Main$DropTask(name)),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h3,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('board__section__header'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(name),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('list-count'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(
											_elm_lang$core$List$length(list))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('board__section__body'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _user$project$Main$renderList(list),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$boardBody = function (model) {
	var done = A2(_user$project$Main$filterByStatus, 'Done', model.tasks);
	var testing = A2(_user$project$Main$filterByStatus, 'Testing', model.tasks);
	var progressing = A2(_user$project$Main$filterByStatus, 'Progressing', model.tasks);
	var backlog = A2(_user$project$Main$filterByStatus, 'Backlog', model.tasks);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('board__container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(_user$project$Main$taskSection, 'Backlog', backlog),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Main$taskSection, 'Progressing', progressing),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Main$taskSection, 'Testing', testing),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Main$taskSection, 'Done', done),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$SubmitTask = function (a) {
	return {ctor: 'SubmitTask', _0: a};
};
var _user$project$Main$TaskInput = function (a) {
	return {ctor: 'TaskInput', _0: a};
};
var _user$project$Main$inputHeader = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('input__container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('input'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('Enter task'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value(model.taskInput),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$TaskInput),
									_1: {
										ctor: '::',
										_0: _user$project$Main$onKeyDown(_user$project$Main$SubmitTask),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('page__container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Main$inputHeader(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$boardBody(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})();
